// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	sqlc "github.com/WsDev69/producer-consumer/pkg/persistence/sqlc"
	mock "github.com/stretchr/testify/mock"
)

// Task is an autogenerated mock type for the Task type
type Task struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: ctx, params
func (_m *Task) CreateTask(ctx context.Context, params sqlc.CreateTaskParams) (sqlc.Task, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 sqlc.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.CreateTaskParams) (sqlc.Task, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.CreateTaskParams) sqlc.Task); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(sqlc.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.CreateTaskParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTask provides a mock function with given fields: ctx, id
func (_m *Task) GetTask(ctx context.Context, id int32) (sqlc.Task, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 sqlc.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (sqlc.Task, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) sqlc.Task); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(sqlc.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnprocessedCount provides a mock function with given fields: ctx
func (_m *Task) GetUnprocessedCount(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUnprocessedCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTaskState provides a mock function with given fields: ctx, params
func (_m *Task) UpdateTaskState(ctx context.Context, params sqlc.UpdateTaskStateParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.UpdateTaskStateParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTask creates a new instance of Task. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTask(t interface {
	mock.TestingT
	Cleanup(func())
}) *Task {
	mock := &Task{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
