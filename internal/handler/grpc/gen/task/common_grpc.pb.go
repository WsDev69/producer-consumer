// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: pkg/proto/task/common.proto

package task

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskServerClient is the client API for TaskServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskServerClient interface {
	Process(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
}

type taskServerClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServerClient(cc grpc.ClientConnInterface) TaskServerClient {
	return &taskServerClient{cc}
}

func (c *taskServerClient) Process(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, "/task.TaskServer/Process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServerServer is the server API for TaskServer service.
// All implementations should embed UnimplementedTaskServerServer
// for forward compatibility
type TaskServerServer interface {
	Process(context.Context, *TaskRequest) (*TaskResponse, error)
}

// UnimplementedTaskServerServer should be embedded to have forward compatible implementations.
type UnimplementedTaskServerServer struct {
}

func (UnimplementedTaskServerServer) Process(context.Context, *TaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}

// UnsafeTaskServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServerServer will
// result in compilation errors.
type UnsafeTaskServerServer interface {
	mustEmbedUnimplementedTaskServerServer()
}

func RegisterTaskServerServer(s grpc.ServiceRegistrar, srv TaskServerServer) {
	s.RegisterService(&TaskServer_ServiceDesc, srv)
}

func _TaskServer_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServerServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskServer/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServerServer).Process(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskServer_ServiceDesc is the grpc.ServiceDesc for TaskServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "task.TaskServer",
	HandlerType: (*TaskServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _TaskServer_Process_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/task/common.proto",
}
