// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: tasks.sql

package sqlc

import (
	"context"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (type, value, creation_time)
VALUES ($1, $2, NOW())
RETURNING id, type, value, state, creation_time, last_update_time
`

type CreateTaskParams struct {
	Type  int32
	Value int32
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask, arg.Type, arg.Value)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Value,
		&i.State,
		&i.CreationTime,
		&i.LastUpdateTime,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, type, value, state, creation_time, last_update_time
FROM tasks
WHERE id = $1
`

func (q *Queries) GetTaskByID(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Value,
		&i.State,
		&i.CreationTime,
		&i.LastUpdateTime,
	)
	return i, err
}

const getUnprocessedCount = `-- name: GetUnprocessedCount :one
SELECT COUNT(id) FROM tasks
WHERE state = 'received'
`

func (q *Queries) GetUnprocessedCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getUnprocessedCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, type, value, state, creation_time, last_update_time
FROM tasks
ORDER BY creation_time DESC
LIMIT $1 OFFSET $2
`

type ListTasksParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Value,
			&i.State,
			&i.CreationTime,
			&i.LastUpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskState = `-- name: UpdateTaskState :exec
UPDATE tasks
SET state = $2
WHERE id = $1
`

type UpdateTaskStateParams struct {
	ID    int32
	State TaskState
}

func (q *Queries) UpdateTaskState(ctx context.Context, arg UpdateTaskStateParams) error {
	_, err := q.db.Exec(ctx, updateTaskState, arg.ID, arg.State)
	return err
}
